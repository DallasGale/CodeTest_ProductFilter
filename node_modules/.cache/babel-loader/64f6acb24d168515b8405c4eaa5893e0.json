{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _isomorphicFetch = require('isomorphic-fetch');\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee() {\n    var body, msg, notValid, _ref2, status, _msg;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            body = new FormData(this.form);\n\n            if (!this.props.recaptcha) {\n              _context.next = 8;\n              break;\n            }\n\n            if (this.state.recaptchaValue) {\n              _context.next = 7;\n              break;\n            }\n\n            msg = 'reCAPTCHA value not set';\n            console.error(msg);\n            this.props.onError(msg);\n            return _context.abrupt('return', this.setState({\n              loading: false,\n              error: false,\n              success: false,\n              recaptchaError: true\n            }));\n\n          case 7:\n            body.append('g-recaptcha-response', this.state.recaptchaValue);\n\n          case 8:\n            this.setState({\n              loading: true,\n              error: false,\n              success: false,\n              recaptchaError: false\n            });\n            _context.next = 11;\n            return this.props.validate(body);\n\n          case 11:\n            notValid = _context.sent;\n\n            if (!notValid) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt('return', this.setState({\n              loading: false,\n              error: true,\n              success: false,\n              recaptchaError: false\n            }));\n\n          case 14:\n            this.props.onSubmit(body);\n            _context.next = 17;\n            return (0, _isomorphicFetch2.default)(this.props.action, {\n              method: 'POST',\n              body: body\n            });\n\n          case 17:\n            _ref2 = _context.sent;\n            status = _ref2.status;\n\n            if (!(status !== 200)) {\n              _context.next = 24;\n              break;\n            }\n\n            _msg = 'Status code: ' + status;\n            console.error(_msg);\n            this.props.onError(_msg);\n            return _context.abrupt('return', this.setState({\n              loading: false,\n              error: true,\n              success: false,\n              recaptchaError: false\n            }));\n\n          case 24:\n            this.onSuccess(body);\n\n          case 25:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function process() {\n    return _ref.apply(this, arguments);\n  }\n\n  return process;\n}();\n/*global FormData:true*/\n\n/*eslint no-undef: \"error\"*/","map":null,"metadata":{},"sourceType":"script"}